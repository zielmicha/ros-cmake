#
#   Package @PROJECT
#
#   This file was automatically generated
#
@{
def aslist(x, transform=lambda x: x):
    return ';'.join(map(transform, x))
def asitems(x, transform=lambda x: x):
    return '\n  '.join(map(transform, x))
}
project(@PROJECT)

file(WRITE ${PROJECT_BINARY_DIR}/rostest.list
  "#
# list of test executables to run generated by rosbuild2
#
")

add_custom_target(@(PROJECT)_codegen)
set(@(PROJECT)_DEPENDS ;@aslist(depend))
set(@(PROJECT)_RECURSIVE_DEPENDS ;@aslist(recursive_depends))


#
# this will trigger makefile regen if manifest.xml changes
#
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/manifest.xml
  ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/manifest.xml.stamp
  @@ONLY)

# third party
@[for tool in thirdparty]
find_package(@tool
  PATHS 
  ${ROS_3RDPARTY_PATH}/share/cmake
  /opt/ros/unstable/3rdparty/share/cmake
  ${CMAKE_SOURCE_DIR}/cmake/3rdparty
  )

include_directories(${@(tool.upper())_INCLUDE_DIRS})
add_definitions(${@(tool.upper())_DEFINITIONS})
set(3RDPARTY_LIBRARIES ${3RDPARTY_LIBRARIES} ${@(tool.upper())_LIBRARIES})
if (NOT @(tool.upper())_FOUND)
  message(FATAL_ERROR "Error, 3rdparty @(tool) not found")
endif()
@[end for]

# cpack_add_component_group(#PROJECT
#  DISPLAY_NAME "brief_doc"
#  DESCRIPTION "description"
#  )

add_definitions(-DROS_PACKAGE_NAME="@PROJECT")
message(STATUS " + @PROJECT")

if (IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include)

  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

  install(DIRECTORY include/
    DESTINATION include/
    COMPONENT @PROJECT
    PATTERN ".svn" EXCLUDE
    )

endif()

#
# DEPENDED_PACKAGE_PATHS = @DEPENDED_PACKAGE_PATHS
#
set(DEPENDED_PACKAGE_PATHS "@aslist(DEPENDED_PACKAGE_PATHS)")

#
# actions
#
rosbuild_actions(GENERATED_ACTIONS @(actions))
rosbuild_msgs(GENERATED ${GENERATED_ACTIONS})

rosbuild_msgs(STATIC @msgs)
rosbuild_srvs(STATIC @srvs)

rosbuild_cfgs(@cfgs)

# message("#(PROJECT)_generated: ${#(PROJECT)_generated}")

rosbuild_gentargets()

# exported_include_dirs
#
@[for d in exported_include_dirs]
include_directories(@(d))
@[end for]

#
# These are no good, apparently
#
# #[for d in exported_include_dirs]
# install(DIRECTORY #d/ 
#   DESTINATION include/ 
#   COMPONENT #PROJECT 
#   OPTIONAL 
#   PATTERN .svn EXCLUDE
#   )
# #[end for]
#

# libs_i_need
@[if len(libs_i_need) > 0]
set(EXPORTED_TO_ME_LIBRARIES 
  @asitems(libs_i_need)
  )
@[end if]

# swig_flags
#set(#(PROJECT)_SWIG_FLAGS
#[if len(swig_flags) > 0]
  #asitems(swig_flags)
#[end if]
#[if len(thirdparty) > 0]
  #asitems(thirdparty, lambda x: "${%s_SWIG_FLAGS}" % x.upper())
#[end if]
#  )

# defines
@[if len(defines) > 0]
add_definitions(
  @asitems(defines)
  )
@[end if]

# recursive_depends
# @depend

@[if len(depend) > 0]
add_dependencies(@(PROJECT)_codegen
  @asitems([x + "_codegen" for x in depend])
  )
@[end if]

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/${PROJECT_NAME}/__init__.py)
  install(DIRECTORY src/
    DESTINATION python
    PATTERN ".svn" EXCLUDE
    REGEX ".*\\.py$"
    )
else()
  # if there is only generated python in this project
  # install a dummy __init__.py
  
  @[if (len(msgs) + len(srvs) > 0)]
     install(FILES ${CMAKE_SOURCE_DIR}/cmake/__init__.py
       DESTINATION python/${PROJECT_NAME}
       )
  @[end if]
endif()

# 
# 
# # includes_i_need
@[for d in includes_i_need]
include_directories(@d
  )
@[end for]
# #  )
# 
# # link_dirs
# #link_directories(
# #  #asitems(link_dirs)
# #  )
# 
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  DESTINATION share
  USE_SOURCE_PERMISSIONS
  FILES_MATCHING 
  PATTERN "*.xml" 
  PATTERN "*.launch" 
  PATTERN "*.msg" 
  PATTERN "*.srv" 
  PATTERN "*.action" 
  PATTERN "*.cmake" 
  PATTERN "*.dox" 
  PATTERN "*.yaml" 
  PATTERN ".svn" EXCLUDE
  PATTERN "include" EXCLUDE
  )
# 
# #install(EXPORT ROS 
# #  NAMESPACE #PROJECT 
# #  FILE #(PROJECT).cmake
# #  DESTINATION share/cmake/#PROJECT
# #  COMPONENT #PROJECT
# #  )
# 
# configure_file(${CMAKE_SOURCE_DIR}/cmake/Findpackage.cmake.in
#   ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/Find#(PROJECT).cmake
#   ##ONLY)
# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/Find#(PROJECT).cmake
#   DESTINATION share/cmake
#   )
# 
# configure_file(${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT)-config.cmake.in
#   ${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT)-config.cmake
#   ##ONLY)
# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT)-config.cmake
#   DESTINATION share/cmake/#(PROJECT)
#   )
# 
# configure_file(${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT).pc.in
#   ${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT).pc
#   ##ONLY)
# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/#(PROJECT).pc
#   DESTINATION lib/pkgconfig
#   )
# 
